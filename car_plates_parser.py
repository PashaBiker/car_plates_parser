from bs4 import BeautifulSoup
import pandas as pd
import requests
import urllib3
import logging
import os
import pandas as pd
import xlsxwriter
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.utils import executor
from aiogram.types import CallbackQuery
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import CallbackQuery
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

def html_receive(region):

    headers = {
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
        'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
        'Cache-Control': 'max-age=0',
        'Connection': 'keep-alive',
        # 'Cookie': '_ga=GA1.3.1940355900.1677262208; _gid=GA1.3.509915868.1677694972; _gat=1',
        'Origin': 'https://opendata.hsc.gov.ua',
        'Referer': 'https://opendata.hsc.gov.ua/check-leisure-license-plates/',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'same-origin',
        'Sec-Fetch-User': '?1',
        'Upgrade-Insecure-Requests': '1',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
        'sec-ch-ua': '"Chromium";v="110", "Not A(Brand";v="24", "Google Chrome";v="110"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
    }

    url = 'http://opendata.hsc.gov.ua/check-leisure-license-plates'
    csrf_response = requests.post(url, verify=False, timeout=10)
    csrf_soup = BeautifulSoup(csrf_response.text, 'html.parser')
    csrf_token = csrf_soup.find(
        'input', {'name': 'csrfmiddlewaretoken'})['value']

    data = {
        'region': region,
        'type_venichle': 'light_car_and_truck',
        'number': '',
        'csrfmiddlewaretoken': csrf_token,
    }

    response = requests.post(
        'http://opendata.hsc.gov.ua/check-leisure-license-plates/', headers=headers, data=data)

    # –∑–¥–µ—Å—å –≤–º–µ—Å—Ç–æ "html_code" –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å HTML –∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    decoded = response.content
    decoded_utf = decoded.decode('utf-8')

    return decoded_utf


def handler(region, name_of_tsc):
    decoded_utf = html_receive(region)
    soup = BeautifulSoup(decoded_utf, 'html.parser')

    # –ø–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    table = soup.find('table')

    # —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ
    data = []

    # –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ —Ç–∞–±–ª–∏—Ü—ã
    try:
        for row in table.find_all('tr'):
            # –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–µ–∫
            columns = row.find_all('td')
            # –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–æ–∫
            data.append([col.text.strip() for col in columns])
    
    except:
        data.append('Nothing')

    # —Å–æ–∑–¥–∞–µ–º DataFrame —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    df = pd.DataFrame(data[1:], columns=data[0])

    # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    filtered_df = df[(df.iloc[:, 1] == '0') & (
        df.iloc[:, 2].str.contains(f'{name_of_tsc}'))]

    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–µ—Ä–≤–æ–º—É —Å—Ç–æ–ª–±—Ü—É –≤ –ø–æ—Ä—è–¥–∫–µ –æ—Ç –ê –¥–æ –Ø
    filtered_df = filtered_df.sort_values(
        by=filtered_df.columns[0], ascending=True)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Excel
    with pd.ExcelWriter(f'{name_of_tsc}.xlsx', engine='xlsxwriter') as writer:
        filtered_df.to_excel(writer, index=False, sheet_name='Sheet1')
        workbook = writer.book
        worksheet = writer.sheets['Sheet1']

        # –∑–∞–¥–∞–µ–º —à–∏—Ä–∏–Ω—É –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
        worksheet.set_column(0, 0, max(df.iloc[:, 0].str.len()) + 1)

    data_len = filtered_df.shape[0]

    # –≤—ã–≤–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤ –≤ –ø–µ—Ä–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ
    print('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤:', data_len)

    return data_len

# TG Token
bot = Bot(token="xxx")
# —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# —Å–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
class Region(StatesGroup):
    region = State()


# —Å–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¢–°–¶
class TSC(StatesGroup):
    tsc = State()

markup = InlineKeyboardMarkup().add(InlineKeyboardButton("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–æ–º–µ—Ä–Ω–∏—Ö –∑–Ω–∞–∫—ñ–≤ ‚úÖ", callback_data="start"))
markup_reload = InlineKeyboardMarkup().add(InlineKeyboardButton("–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑ üîÇ", callback_data="start"))

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    # –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–Ω–∞—á–∞—Ç—å""
    await message.answer('–ü—Ä–∏–≤—ñ—Çüëãüèª –Ø –±–æ—Ç, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤ —É —Ç–≤–æ—î–º—É —Å–µ—Ä–≤—ñ—Å–Ω–æ–º—É —Ü–µ–Ω—Ç—Ä—ñ! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëáüèª', reply_markup=markup)

@dp.callback_query_handler(text="start")
async def process_start(callback_query: CallbackQuery):
    # –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω"
    await bot.send_message(callback_query.from_user.id, '''üòå –û–±–µ—Ä—ñ—Ç—å —Ä–µ–≥—ñ–æ–Ω:

1 - –ê–† –ö—Ä–∏–º
2 - –í—ñ–Ω–Ω–∏—Ü—å–∫–∞
3 - –í–æ–ª–∏–Ω—Å—å–∫–∞
4 - –î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞
5 - –î–æ–Ω–µ—Ü—å–∫–∞
6 - –ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞
7 - –ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞
8 - –ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞
9 - –Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞
26 - –º. –ö–∏—ó–≤
10 - –ö–∏—ó–≤—Å—å–∫–∞
11 - –ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞
12 - –õ—É–≥–∞–Ω—Å—å–∫–∞
13 - –õ—å–≤—ñ–≤—Å—å–∫–∞
14 - –ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞
15 - –û–¥–µ—Å—å–∫–∞
16 - –ü–æ–ª—Ç–∞–≤—Å—å–∫–∞
17 - –†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞
18 - –°—É–º—Å—å–∫–∞
19 - –¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞
20 - –•–∞—Ä–∫—ñ–≤—Å—å–∫–∞
21 - –•–µ—Ä—Å–æ–Ω—Å—å–∫–∞
22 - –•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞
23 - –ß–µ—Ä–∫–∞—Å—å–∫–∞
25 - –ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞
24 - –ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞

‚ùóÔ∏è–ù–∞–¥—ñ—à–ª—ñ—Ç—å —á–∏—Å–ª–æ —Ä–µ–≥—ñ–æ–Ω—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 26''')

    # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Region.region
    await Region.region.set()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º —Ä–µ–≥–∏–æ–Ω–∞
@dp.message_handler(state=Region.region)
async def process_region(message: types.Message, state: FSMContext):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    region = message.text

    # –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–æ–º–µ—Ä –¢–°–¶"
    await message.answer(f"–ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É —á–∏ –Ω–æ–º–µ—Ä –¢–°–¶. \n–©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –Ω–æ–º–µ—Ä –≤–∞—à–æ–≥–æ –¢–°–¶, –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ <a href=\"https://hsc.gov.ua/kontakti/kontakti-gsts-pidrozdiliv/\">–ø–æ—Å–∏–ª–∞–Ω–Ω—è–º</a>.\n‚ùóÔ∏è–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä –¢–°–¶, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 8046", parse_mode="HTML", disable_web_page_preview=True)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Region.region
    await state.update_data(region=region)

    # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ TSC.tsc
    await TSC.tsc.set()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¢–°–¶
@dp.message_handler(state=TSC.tsc)
async def process_tsc(message: types.Message, state: FSMContext):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¢–°–¶ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    tsc = message.text

    # –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    region = data.get('region')

    # –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    data_len = None
    try:
        in_process_message = await message.answer('‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä—è—é –Ω–∞—è–≤–Ω—ñ—Å—Ç—å‚Ä¶')
        data_len = handler(region=region, name_of_tsc=tsc)
        await message.answer(f"–û–±—Ä–∞–Ω–∏–π —Ä–µ–≥—ñ–æ–Ω: {region}\n–û–±—Ä–∞–Ω–∏–π –¢–°–¶: {tsc}.\n–í—Å—å–æ–≥–æ –≤—ñ–ª—å–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤: {data_len}")

        file_name = f"{tsc}.xlsx"  # –∏–º—è —Ñ–∞–π–ª–∞
        file_path = os.path.join(os.getcwd(), file_name)  # –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞

        await in_process_message.delete()
        with open(file_path, "rb") as file:
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —á–∞—Ç
            await bot.send_document(message.chat.id, file, reply_markup=markup_reload)
            os.remove(file_name)
        # –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        await state.finish()
    
    except:
        if data_len is not None:
            await message.answer(f"–û–±—Ä–∞–Ω–∏–π —Ä–µ–≥—ñ–æ–Ω: {region}\n–û–±—Ä–∞–Ω–∏–π –¢–°–¶: {tsc}.\n–í—Å—å–æ–≥–æ –≤—ñ–ª—å–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤: {data_len}, –∞–ª–µ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!")
        else:
            await message.answer(f"üò¢ –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ üëáüèª", reply_markup=markup_reload)
        await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
